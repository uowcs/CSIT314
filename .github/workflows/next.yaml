name: Next.js CI/CD with DevSecOps

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  code-quality-and-security:
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3

      - name: move into the frontend folder
        run: cd frontend
      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - name: Install Dependencies
        run: npm install

      - name: ESLint Check
        run: npm run lint
        # Ensure your package.json has a lint script that runs eslint.

      - name: Snyk Vulnerability Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          # You must add the SNYK_TOKEN secret in your repository settings on GitHub.

      - name: Sonarqube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # build-and-test:
  #   needs: code-quality-and-security
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     
  #     - name: Use Node.js 16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'
  #         cache: 'npm'

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Build
  #       run: npm run build

  #     - name: Run Tests
  #       run: npm test

  #   deploy:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #       - uses: actions/checkout@v3

  #       - name: Log in to GitHub Container Registry
  #           uses: docker/login-action@v1
  #           with:
  #               registry: ghcr.io
  #               username: ${{ github.actor }}
  #               password: ${{ secrets.GITHUB_TOKEN }}
  #           # GITHUB_TOKEN is automatically generated by GitHub for each run, allowing you to authenticate in a secure way.

  #       - name: Build and push Docker image
  #       uses: docker/build-push-action@v2
  #       with:
  #           context: .
  #           file: ./Dockerfile
  #           push: true
  #           tags: ghcr.io/${{ github.repository_owner }}/your-image-name:${{ github.sha }}
  #           # Replace 'your-image-name' with the desired image name. This example uses the commit SHA as the image tag for uniqueness.

